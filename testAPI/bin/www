const app = require('../app');
const debug = require('debug')('testapi:server');
const http = require('http');
const Db = require('../src/config/mongodb');


const cluster = require('cluster');
const numCPUs = require('os').cpus().length;


const normalizePort = val => {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//cluster - se entrar no if, cluster master - sen√£o slave
if (cluster.isMaster) {
    for (let i = 0; i < numCPUs; i++) {
        cluster.fork();
    }
    cluster.on('exit', () => {
        console.log(`the process ${process.pid} was killed`);
        Db.disconnect();
        cluster.fork();
    });
    //cluster - fluxo normal continuaria sem o else
} else {

    const onError = error => {
        if (error.syscall !== 'listen') {
            throw error;
        }

        const bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            //not have access to this port
            case 'EACCES':
                console.error(`${bind} requires elevated privileges`);
                process.exit(1);
                break;
            //port already in use
            case 'EADDRINUSE':
                console.error(`${bind} is already in use`);
                process.exit(1);
                break;
            default:
                throw error;
        }
    };

    const onListening = () => {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        console.log(`Listening on ${bind}`);
        debug('Listening on ' + bind);
    };

    const server = http.createServer(app);

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);


}